"use client"

import { GoogleLogin, GoogleOAuthProvider } from "@react-oauth/google";
import { useRouter, useSearchParams } from 'next/navigation';
import { toast } from "sonner";
import { useRef, useState, useEffect } from 'react';

// store
import { postSocialLogin } from "@/api/auth";
import useAuthStore from '@/store/authStore';

const GoogleLoginButton = () => {
  const clientId = process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID;
  const buttonRef = useRef(null);
  const [buttonWidth, setButtonWidth] = useState(0);
  
  // login Ïï°ÏÖò Í∞ÄÏ†∏Ïò§Í∏∞
  const loginAction = useAuthStore((state) => state.login);
  const router = useRouter();
  const searchParams = useSearchParams();

  // Î≤ÑÌäº ÌÅ¨Í∏∞ Ï∏°Ï†ï
  useEffect(() => {
    const updateButtonWidth = () => {
      if (buttonRef.current) {
        const width = buttonRef.current.offsetWidth;
        setButtonWidth(width);
      }
    };

    // Ï¥àÍ∏∞ ÌÅ¨Í∏∞ Ï∏°Ï†ï
    updateButtonWidth();

    // ResizeObserverÎ°ú Ïã§ÏãúÍ∞Ñ ÌÅ¨Í∏∞ Î≥ÄÌôî Í∞êÏßÄ
    const resizeObserver = new ResizeObserver(updateButtonWidth);
    if (buttonRef.current) {
      resizeObserver.observe(buttonRef.current);
    }

    // ÏúàÎèÑÏö∞ Î¶¨ÏÇ¨Ïù¥Ï¶à Ïù¥Î≤§Ìä∏ÎèÑ Ï∂îÍ∞Ä
    window.addEventListener('resize', updateButtonWidth);

    return () => {
      resizeObserver.disconnect();
      window.removeEventListener('resize', updateButtonWidth);
    };
  }, []);

  const handleLoginSuccess = async (response) => {
    if (!response?.credential) {
      console.error("Google Ïù∏Ï¶ù ÌÜ†ÌÅ∞ÏùÑ Î∞õÏßÄ Î™ªÌñàÏäµÎãàÎã§.");
      return;
    }
    // GoogleÏùò ID ÌÜ†ÌÅ∞ Ï∂îÏ∂ú
    const idToken = response.credential;

    try {
      // Î∞±ÏóîÎìú ÏÑúÎ≤ÑÎ°ú ID ÌÜ†ÌÅ∞ Ï†ÑÏÜ°
      await postSocialLogin('google', {
        code: idToken,
        provider: 'google',
        redirectUri: '/auth/social/login/google'
      }).then(res => {
        console.log(res);
        loginAction(res.data);
        toast.success('Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ! ÌôòÏòÅÌï©ÎãàÎã§! üéâ');
        setTimeout(() => {
          const redirectTo = searchParams.get('redirect') || '/';
          router.push(redirectTo);
        }, 1500);
      });
    } catch (error) {
      console.error('Error during login:', error);
    }
  };

  const handleLoginFailure = (error) => {
    console.log("Google Î°úÍ∑∏Ïù∏ Ïã§Ìå®:", error);
  };

  return (
    <>
      {clientId && (
        <button 
          ref={buttonRef}
          className="w-full py-2 rounded flex items-center h-[40px] border border-gray-300 hover:bg-gray-50"
        >
          <GoogleOAuthProvider clientId={clientId}>
            <GoogleLogin
              onSuccess={handleLoginSuccess}
              onError={handleLoginFailure}
              size="large"
              logo_alignment="center"
              width={buttonWidth > 0 ? `${buttonWidth}px` : '100%'}
            />
          </GoogleOAuthProvider>
        </button>
      )}
    </>
  );
};

export default GoogleLoginButton;