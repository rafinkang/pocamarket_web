# 워크플로우 이름
name: Deploy pocamarket-web to EC2

# 워크플로우 실행 조건: 'master' 브랜치 대상 PR 생성/업데이트 시
on:
  push:
    branches: [ "master" ]

# 워크플로우 내에서 사용할 환경 변수 정의
env:
  CONTAINER_NAME: pocamarket-web # EC2에서 실행될 컨테이너 이름
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/pocamarket-web

jobs:
  build-and-deploy:
    # 실행 환경
    runs-on: ubuntu-latest
    steps:
      # 1. GitHub 저장소의 소스 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Docker 빌드 환경 최적화 설정 (Buildx)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Docker Hub 로그인 (GitHub Secrets 사용)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4. Docker 이미지 빌드 및 Docker Hub에 푸시
      #    - latest: 항상 최신 버전을 가리키는 태그
      #    - ${github.sha}: 각 커밋별 고유 버전을 가리키는 태그
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=${{ secrets.NODE_ENV }}
            NEXT_PUBLIC_DEBUG=${{ secrets.NEXT_PUBLIC_DEBUG }}
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            NEXT_PUBLIC_SERVER_URL=${{ secrets.NEXT_PUBLIC_SERVER_URL }}
            NEXT_PUBLIC_LOCAL_API_URL=${{ secrets.NEXT_PUBLIC_LOCAL_API_URL }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            CHOKIDAR_USEPOLLING=${{ secrets.CHOKIDAR_USEPOLLING }}

      # 5. EC2에 SSH로 접속하여 배포 스크립트 실행
      - name: Deploy WEB to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # EC2 서버에서 실행될 스크립트
            # docker-compose.yml이 있는 프로젝트 루트 디렉토리로 이동
            cd /var/www/pocamarket/ 

            # Docker Hub에서 최신 이미지 pull
            docker pull ${{ env.DOCKER_IMAGE }}:latest
            
            # Docker Compose로 'pocamarket-web' 서비스만 재시작
            docker-compose up -d --no-deps pocamarket-web
            
            # 사용하지 않는 이전 Docker 이미지 정리 (EC2 서버 용량 확보)
            docker image prune -af

      # 6. Docker Hub 오래된 이미지 정리 (Docker Hub API 사용)
      - name: Clean up old Docker Hub images
        run: |
          set -e  # 에러 발생시 스크립트 중단
          
          # 환경 변수 설정
          REPO_NAME="${{ env.IMAGE_NAME }}"
          USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
          PASSWORD="${{ secrets.DOCKERHUB_TOKEN }}"
          KEEP_COUNT=5  # 유지할 이미지 개수
          
          echo "Docker Hub 이미지 정리 시작: ${USERNAME}/${REPO_NAME}"
          
          # Docker Hub API 인증을 위한 토큰 획득
          echo "Docker Hub 인증 중..."
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST \
            -d '{"username": "'${USERNAME}'", "password": "'${PASSWORD}'"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          if [ "$TOKEN" = "null" ] || [ -z "$TOKEN" ]; then
            echo "❌ Docker Hub 인증 실패"
            exit 1
          fi
          
          echo "Docker Hub 인증 성공"
          
          # 모든 태그 조회 (날짜순으로 정렬, latest 제외)
          echo "태그 목록 조회 중..."
          TAGS_JSON=$(curl -s -H "Authorization: JWT ${TOKEN}" \
            "https://hub.docker.com/v2/repositories/${USERNAME}/${REPO_NAME}/tags/?page_size=100")
          
          # 삭제할 태그 결정 (latest 제외하고 날짜순으로 정렬하여 오래된 것들만 선택)
          ALL_TAGS_COUNT=$(echo "$TAGS_JSON" | jq -r ".results[] | select(.name != \"latest\") | .name" | wc -l)
          
          if [ "$ALL_TAGS_COUNT" -le "$KEEP_COUNT" ]; then
            echo "현재 태그 수($ALL_TAGS_COUNT)가 유지할 개수($KEEP_COUNT) 이하입니다."
            TAGS_TO_DELETE=""
          else
            DELETE_COUNT=$((ALL_TAGS_COUNT - KEEP_COUNT))
            echo "전체 태그 수: $ALL_TAGS_COUNT, 삭제할 태그 수: $DELETE_COUNT"
            
            # 오래된 순으로 정렬하여 삭제할 태그들 선택
            TAGS_TO_DELETE=$(echo "$TAGS_JSON" | \
              jq -r ".results[] | select(.name != \"latest\") | [.last_updated, .name] | @csv" | \
              sort | head -n "$DELETE_COUNT" | cut -d',' -f2 | tr -d '"')
          fi
          
          if [ -z "$TAGS_TO_DELETE" ]; then
            echo "삭제할 태그가 없습니다."
          else
            echo "  삭제할 태그 목록:"
            echo "$TAGS_TO_DELETE"
            
            # 태그들 삭제
            echo "$TAGS_TO_DELETE" | while read -r tag; do
              if [ ! -z "$tag" ] && [ "$tag" != "latest" ]; then
                echo "삭제 중: $tag"
                
                DELETE_RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null \
                  -X DELETE -H "Authorization: JWT ${TOKEN}" \
                  "https://hub.docker.com/v2/repositories/${USERNAME}/${REPO_NAME}/tags/${tag}/")
                
                if [ "$DELETE_RESPONSE" = "204" ]; then
                  echo "   $tag 삭제 성공"
                else
                  echo "   $tag 삭제 실패 (HTTP: $DELETE_RESPONSE)"
                fi
                
                # API 호출 제한을 위한 대기
                sleep 2
              fi
            done
          fi
          
          echo "Docker Hub 이미지 정리 완료"