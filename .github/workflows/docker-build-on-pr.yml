# 워크플로우 이름
name: CI/CD to AWS EC2

# 워크플로우 실행 조건: master 브랜치에 push 이벤트가 발생했을 때
on:
  push:
    branches:
      - master

# 워크플로우 전체에서 사용할 환경 변수 정의
env:
  # Docker Hub 사용자 이름과 이미지 이름을 실제 값으로 수정하세요.
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/pocamarket-web
  CONTAINER_NAME: pocamarket-app-container # EC2에서 실행될 컨테이너 이름

jobs:
  build-and-deploy:
    # 실행 환경
    runs-on: ubuntu-latest
    
    # 워크플로우 실행에 필요한 권한 설정
    permissions:
      contents: read
      id-token: write

    steps:
      # 1. GitHub 저장소의 소스 코드를 워크플로우 가상 머신으로 가져옴
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Docker 빌드 환경 최적화 설정 (Buildx)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Docker Hub 로그인 (GitHub Secrets 사용)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4. Docker 이미지 빌드 및 Docker Hub에 푸시
      #    - latest: 항상 최신 버전을 가리키는 태그
      #    - ${github.sha}: 각 커밋별 고유 버전을 가리키는 태그
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 5. EC2에 SSH로 접속하여 배포 스크립트 실행
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # EC2 서버에서 실행될 명령어들
            
            # Docker Hub에서 최신 이미지 pull
            docker pull ${{ env.DOCKER_IMAGE }}:latest
            
            # 기존에 실행 중인 컨테이너가 있다면 중지하고 삭제
            if [ $(docker ps -q -f name=${{ env.CONTAINER_NAME }}) ]; then
              docker stop ${{ env.CONTAINER_NAME }}
              docker rm ${{ env.CONTAINER_NAME }}
            fi
            
            # 새로운 이미지로 컨테이너 실행
            # -p 80:3000 : EC2의 80번 포트를 컨테이너의 3000번 포트와 연결
            # --env-file ./.env : EC2 서버의 프로젝트 경로에 미리 생성해둔 .env 파일 사용
            docker run -d -p 80:3000 --name ${{ env.CONTAINER_NAME }} --restart always --env-file /srv/pocamarket/.env ${{ env.DOCKER_IMAGE }}:latest
            
            # 사용하지 않는 이전 Docker 이미지 정리 (EC2 서버 용량 확보)
            docker image prune -af